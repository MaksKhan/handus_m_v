#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <cmath>
#include <queue>
#include "Vector.hpp"



int main()
{

    
    const double speed_mouse = 5; // модуль скорости мышки
    const double speed_cat = 3; // модуль скорости кошки
    const double r_kill = 0.5; // радиус поражения кошки

    Rdec2D vector_mouse{ 0, 1 }; // направляющий вектор мышки
    Rdec2D vector_cat{ 0, 0 }; // направляющий вектор кошки



    Rdec2D coordinates_mouse = { 0, -10 }; // координаты мышки
    Rdec2D coordinates_cat = { 10, 0 }; // координаты кошки

    bool flag = true; //не догнала ли кошка


    for (int i = 0; i < 1000; i++) {
        // берем вектор (-x кошки, 0)
        // он нужен для нахождения направляющего вектора кошки
        Rdec2D vector_cat_x{ -coordinates_cat.x, 0 };


        // направляющий вектор кошки = (-x кошки, 0) - направляющие вектор мышки
        vector_cat = get_naprav_vector(vector_cat_x) - get_naprav_vector(vector_mouse); // обновляем направляющий вектор кошки


        // умножим направляющий вектор на скорость животного,
        // а потом поделим на тысячу, чтобы смоделировать изменение расстояния за малый промежуток времени
        coordinates_mouse = vector_mouse * (speed_mouse / 1000);
        coordinates_cat = vector_cat * (speed_cat / 1000);


        // смотрим, попадает ли в радиус поражения
        if (((coordinates_mouse.x - coordinates_cat.x) < r_kill) && ((coordinates_mouse.y - coordinates_cat.y) < r_kill)) {
            std::cout << "Cat wins";
            flag = false;
            break;
        }
    }

    if (flag) {
        std::cout << "Mouse wins";
    }


    
    
    
}
